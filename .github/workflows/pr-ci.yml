name: PR CI

on:
  pull_request:
    branches: [ main ]

# Allow one concurrent deployment
concurrency:
  group: "pr-ci"
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - name: Setup Flutter
      uses: hrishikesh-kadam/setup-flutter@v1
      with:
        ref: ${{ env.FLUTTER_VERSION }}
        setFlutterRootPath: 'true'
        addPubCacheBinToPath: 'true'
        flutterPrecache: '--windows'

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: mingw-w64-x86_64-libgphoto2 mingw-w64-x86_64-pkgconf mingw-w64-x86_64-gcc mingw-w64-x86_64-clang
        path-type: inherit
        release: true

    - name: Install minimal Rust
      uses: actions-rs/toolchain@v1
      with:
        target: x86_64-pc-windows-gnu
        profile: minimal
        toolchain: stable-gnu
        components: rustfmt, clippy
        default: true

    - name: Setup sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3
      
    - name: Install flutter_rust_bridge_codegen
      uses: baptiste0928/cargo-install@v1
      with:
        crate: flutter_rust_bridge_codegen
        version: "1.79.0"

    - name: Install Dependencies
      run: flutter packages get

    - name: Generation l10n
      run: flutter gen-l10n

    - name: Generate Dart-to-Rust bridging code
      run: >
        flutter_rust_bridge_codegen
        --rust-input rust/src/dart_bridge/api.rs
        --dart-output lib/rust_bridge/library_api.generated.dart
        --rust-output rust/src/dart_bridge/ffi_exports.rs
        --skip-add-mod-to-lib --no-build-runner
      
    - name: Run Code Generation
      run: dart run build_runner build
      
    - name: Flutter Analyze
      run: flutter analyze

    - name: Build Rust library
      run: msys2 -c 'cd rust && cargo build --release --verbose'

    - name: Build Project
      run: msys2 -c 'flutter build windows --release --dart-define SENTRY_DSN=${{ secrets.SENTRY_DSN }} --dart-define SENTRY_ENVIRONMENT=Production --dart-define SENTRY_RELEASE=${{ steps.extract_release_version.outputs.distributor_version }} --dart-define IOLIBS=libgphoto2_iolibs --dart-define CAMLIBS=libgphoto2_camlibs'
      
    - name: Bundle dependencies of the helper library
      shell: pwsh
      run: |
        $Env:MINGW_BUNDLEDLLS_SEARCH_PATH = ((msys2 -c 'cygpath -m /') + "mingw64/bin").Replace("/", "\")
        $bundle_script = curl https://raw.githubusercontent.com/h3x4d3c1m4l/mingw-bundledlls/master/mingw-bundledlls
        echo $bundle_script | python - --copy build\windows\runner\Release\momento_booth_native_helpers.dll

    - name: Bundle libgphoto2 additional libs
      shell: pwsh
      run: |
        $Env:MSYS2_ROOT = msys2 -c 'cygpath -m /'
        mkdir build\windows\runner\Release\libgphoto2_iolibs
        cp $Env:MSYS2_ROOT\mingw64\lib\libgphoto2_port\*\*.dll build\windows\runner\Release\libgphoto2_iolibs
        mkdir build\windows\runner\Release\libgphoto2_camlibs
        cp $Env:MSYS2_ROOT\mingw64\lib\libgphoto2\*\*.dll build\windows\runner\Release\libgphoto2_camlibs

    - name: Bundle dependencies of libgphoto2 additional libs
      shell: pwsh
      run: |
        $Env:MINGW_BUNDLEDLLS_SEARCH_PATH = ((msys2 -c 'cygpath -m /') + "mingw64/bin").Replace("/", "\")
        $bundle_script = curl https://raw.githubusercontent.com/h3x4d3c1m4l/mingw-bundledlls/master/mingw-bundledlls

        cd build\windows\runner\Release\
        $lib_folders = @('libgphoto2_iolibs', 'libgphoto2_camlibs')
        foreach ( $folder in $lib_folders )
        {
          $libs = ls $folder
          foreach ( $lib in $libs )
          {
            echo $bundle_script | python - --copy $lib.fullName
          }

          # Now move all libraries to the same folder as the executable (except iolibs and camlibs themselves)
          $files = ls $folder
          foreach ( $file in $files )
          {
            if ($libs.Name -notcontains $file.Name) {
              Move-Item -Path $file -Destination $file.Directory.Parent.FullName -force
            }
          }
        }
