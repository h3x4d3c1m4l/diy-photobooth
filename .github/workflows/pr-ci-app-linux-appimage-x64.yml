name: PR CI App - Linux AppImage x86_64

on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ documentation/**, .github/workflows/pr-ci-documentation.yml, .github/workflows/deploy-documentation.yml, README.md ]

jobs:
  build:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') != true }}

    runs-on: ubuntu-22.04

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install apt packages
      run: sudo apt update && sudo apt install build-essential git clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev llvm libfuse2 libgphoto2-dev

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v1

    - name: Setup Flutter
      uses: hrishikesh-kadam/setup-flutter@v1
      with:
        ref: ${{ env.FLUTTER_VERSION }}
        setFlutterRootPath: 'true'
        addPubCacheBinToPath: 'true'
        flutterPrecache: '--linux'

    - name: Install minimal Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        components: clippy

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          rust -> ../build/linux/x64/release/cargo/build
          rust -> target

    - name: Setup sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: Install cargo-expand
      uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-expand

    - name: Install flutter_rust_bridge_codegen
      uses: baptiste0928/cargo-install@v1
      with:
        crate: flutter_rust_bridge_codegen
        version: "1.82.5"

    - name: Install lddtree
      uses: baptiste0928/cargo-install@v1
      with:
        crate: lddtree

    - name: Install appimagetool
      run: wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" && chmod +x appimagetool && sudo mv appimagetool /usr/local/bin/

    - name: Install Dependencies
      run: flutter packages get

    - name: Generation l10n
      run: flutter gen-l10n

    - name: Generate Dart-to-Rust bridging code
      run: >
        flutter_rust_bridge_codegen
        --rust-input rust/src/dart_bridge/api.rs
        --dart-output lib/rust_bridge/library_api.generated.dart
        --rust-output rust/src/dart_bridge/ffi_exports.rs
        --skip-add-mod-to-lib --no-build-runner

    - name: Run Code Generation
      run: dart run build_runner build

    - name: Flutter Analyze
      run: flutter analyze

    - name: Flutter build
      run: flutter build linux -v --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }} --dart-define=SENTRY_ENVIRONMENT=Production --dart-define SENTRY_RELEASE=${{ github.sha }}

    - name: Create AppDir and copy Flutter bundle
      run: mkdir -p AppDir/app && cp -r build/linux/x64/release/bundle/* AppDir/app/

    - name: Bundle main executable dependency libraries
      run: mkdir AppDir/lib && pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath AppDir/app/momento_booth -copyTo AppDir/lib

    - name: Bundle Rust library and Flutter plugin dependency libraries
      run: for f in AppDir/app/lib/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Copy libgphoto2 camlibs
      run: mkdir AppDir/camlibs && cp /usr/lib/x86_64-linux-gnu/libgphoto2/*/* AppDir/camlibs

    - name: Copy libgphoto2_port iolibs
      run: mkdir AppDir/iolibs && cp /usr/lib/x86_64-linux-gnu/libgphoto2_port/*/* AppDir/iolibs

    - name: Copy GTK printbackends
      run: mkdir AppDir/gtk && cp -r /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends AppDir/gtk

    - name: Bundle libgphoto2 camlibs dependency libraries
      run: for f in /usr/lib/x86_64-linux-gnu/libgphoto2/*/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Bundle libgphoto2_port iolibs dependency libraries
      run: for f in /usr/lib/x86_64-linux-gnu/libgphoto2_port/*/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Bundle GTK printbackends dependency libraries
      run: for f in /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    # - name: Move ld to correct location
    #   run: mv AppDir/lib/ld-linux-x86-64.so.2 AppDir/app/

    - name: Copy icon, .desktop and AppRun, set exec permission on AppRun
      run: |
        cp linux/packaging/appimage/momentoBooth.desktop AppDir/
        cp linux/packaging/appimage/AppRun AppDir/
        cp linux/packaging/appimage/icon.svg AppDir/
        chmod +x AppDir/AppRun

    - name: Pack as AppImage and rename
      run: appimagetool AppDir && mv MomentoBooth-x86_64.AppImage MomentoBooth-Linux-x86_64.AppImage

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Linux x86_64 AppImage
        path: MomentoBooth-Linux-x86_64.AppImage
